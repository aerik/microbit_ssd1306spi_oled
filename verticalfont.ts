namespace custom {
    export class testClass {
        private numAry: number[];
        constructor() {
            this.numAry = [];
            for (let i = 0; i < 1024; i++) {
                this.numAry[i] = 0;
            }
        }
    }
}
namespace verticalfont {
    const ASCII_START = 32;
    const ASCII_END = 126;
	//better as a string?
	const vchars

    export function GetCharacterColumns(inChar: string): number[] {
        let c = inChar.charCodeAt(0);
        if (c < ASCII_START || c > ASCII_END) {
            c = '?'.charCodeAt(0);
        }
        let offset = (c - ASCII_START) * 5;
        let data = vchars.slice(offset, offset + 5);//5 bytes, one for each row
        let vals:number[] = [];
        for(let i=0; i<5; i++){
            vals[i] = data[i].charCodeAt(0);
        }
        return vals;
    }
}