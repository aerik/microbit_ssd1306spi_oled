/**
 * Custom blocks
 */
//% weight=100 color=#0fbc11 icon="ïƒƒ"
namespace custom {
    let pendolino3: number[] = [0x0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x8, 0x8, 0x0, 0x8, 0xa, 0x4a, 0x40, 0x0, 0x0, 0xa, 0x5f, 0xea, 0x5f, 0xea, 0xe, 0xd9, 0x2e, 0xd3, 0x6e, 0x19, 0x32, 0x44, 0x89, 0x33, 0xc, 0x92, 0x4c, 0x92, 0x4d, 0x8, 0x8, 0x0, 0x0, 0x0, 0x4, 0x88, 0x8, 0x8, 0x4, 0x8, 0x4, 0x84, 0x84, 0x88, 0x0, 0xa, 0x44, 0x8a, 0x40, 0x0, 0x4, 0x8e, 0xc4, 0x80, 0x0, 0x0, 0x0, 0x4, 0x88, 0x0, 0x0, 0xe, 0xc0, 0x0, 0x0, 0x0, 0x0, 0x8, 0x0, 0x1, 0x22, 0x44, 0x88, 0x10, 0xc, 0x92, 0x52, 0x52, 0x4c, 0x4, 0x8c, 0x84, 0x84, 0x8e, 0x1c, 0x82, 0x4c, 0x90, 0x1e, 0x1e, 0xc2, 0x44, 0x92, 0x4c, 0x6, 0xca, 0x52, 0x5f, 0xe2, 0x1f, 0xf0, 0x1e, 0xc1, 0x3e, 0x2, 0x44, 0x8e, 0xd1, 0x2e, 0x1f, 0xe2, 0x44, 0x88, 0x10, 0xe, 0xd1, 0x2e, 0xd1, 0x2e, 0xe, 0xd1, 0x2e, 0xc4, 0x88, 0x0, 0x8, 0x0, 0x8, 0x0, 0x0, 0x4, 0x80, 0x4, 0x88, 0x2, 0x44, 0x88, 0x4, 0x82, 0x0, 0xe, 0xc0, 0xe, 0xc0, 0x8, 0x4, 0x82, 0x44, 0x88, 0xe, 0xd1, 0x26, 0xc0, 0x4, 0xe, 0xd1, 0x35, 0xb3, 0x6c, 0xc, 0x92, 0x5e, 0xd2, 0x52, 0x1c, 0x92, 0x5c, 0x92, 0x5c, 0xe, 0xd0, 0x10, 0x10, 0xe, 0x1c, 0x92, 0x52, 0x52, 0x5c, 0x1e, 0xd0, 0x1c, 0x90, 0x1e, 0x1e, 0xd0, 0x1c, 0x90, 0x10, 0xe, 0xd0, 0x13, 0x71, 0x2e, 0x12, 0x52, 0x5e, 0xd2, 0x52, 0x1c, 0x88, 0x8, 0x8, 0x1c, 0x1f, 0xe2, 0x42, 0x52, 0x4c, 0x12, 0x54, 0x98, 0x14, 0x92, 0x10, 0x10, 0x10, 0x10, 0x1e, 0x11, 0x3b, 0x75, 0xb1, 0x31, 0x11, 0x39, 0x35, 0xb3, 0x71, 0xc, 0x92, 0x52, 0x52, 0x4c, 0x1c, 0x92, 0x5c, 0x90, 0x10, 0xc, 0x92, 0x52, 0x4c, 0x86, 0x1c, 0x92, 0x5c, 0x92, 0x51, 0xe, 0xd0, 0xc, 0x82, 0x5c, 0x1f, 0xe4, 0x84, 0x84, 0x84, 0x12, 0x52, 0x52, 0x52, 0x4c, 0x11, 0x31, 0x31, 0x2a, 0x44, 0x11, 0x31, 0x35, 0xbb, 0x71, 0x12, 0x52, 0x4c, 0x92, 0x52, 0x11, 0x2a, 0x44, 0x84, 0x84, 0x1e, 0xc4, 0x88, 0x10, 0x1e, 0xe, 0xc8, 0x8, 0x8, 0xe, 0x10, 0x8, 0x4, 0x82, 0x41, 0xe, 0xc2, 0x42, 0x42, 0x4e, 0x4, 0x8a, 0x40, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1f, 0x8, 0x4, 0x80, 0x0, 0x0, 0x0, 0xe, 0xd2, 0x52, 0x4f, 0x10, 0x10, 0x1c, 0x92, 0x5c, 0x0, 0xe, 0xd0, 0x10, 0xe, 0x2, 0x42, 0x4e, 0xd2, 0x4e, 0xc, 0x92, 0x5c, 0x90, 0xe, 0x6, 0xc8, 0x1c, 0x88, 0x8, 0xe, 0xd2, 0x4e, 0xc2, 0x4c, 0x10, 0x10, 0x1c, 0x92, 0x52, 0x8, 0x0, 0x8, 0x8, 0x8, 0x2, 0x40, 0x2, 0x42, 0x4c, 0x10, 0x14, 0x98, 0x14, 0x92, 0x8, 0x8, 0x8, 0x8, 0x6, 0x0, 0x1b, 0x75, 0xb1, 0x31, 0x0, 0x1c, 0x92, 0x52, 0x52, 0x0, 0xc, 0x92, 0x52, 0x4c, 0x0, 0x1c, 0x92, 0x5c, 0x90, 0x0, 0xe, 0xd2, 0x4e, 0xc2, 0x0, 0xe, 0xd0, 0x10, 0x10, 0x0, 0x6, 0xc8, 0x4, 0x98, 0x8, 0x8, 0xe, 0xc8, 0x7, 0x0, 0x12, 0x52, 0x52, 0x4f, 0x0, 0x11, 0x31, 0x2a, 0x44, 0x0, 0x11, 0x31, 0x35, 0xbb, 0x0, 0x12, 0x4c, 0x8c, 0x92, 0x0, 0x11, 0x2a, 0x44, 0x98, 0x0, 0x1e, 0xc4, 0x88, 0x1e, 0x6, 0xc4, 0x8c, 0x84, 0x86, 0x8, 0x8, 0x8, 0x8, 0x8, 0x18, 0x8, 0xc, 0x88, 0x18, 0x0, 0x0, 0xc, 0x83, 0x60];
    let ASCII_START = 32;
    let ASCII_END = 126;

    /**
     * TODO: describe your function here
     * @param n describe parameter here, eg: 5
     * @param s describe parameter here, eg: "Hello"
     * @param e describe parameter here
     */
    //% block
    export function ShowCharAtIdx(s: string, n: number): void {
        let c = s.charCodeAt(n);
        if (c < ASCII_START || c > ASCII_END) {
            c = '?'.charCodeAt(0);
        }
        let offset = (c - ASCII_START) * 5;
        let data = pendolino3.slice(offset, offset + 5);
        let img: Image = images.createImage(`
. . . . .
. . . . .
. . . . .
. . . . .
. . . . .
`)
        for (let y = 0; y < 5; y++) {
            for (let x = 0; x < 5; x++) {
                let cur = false;
                let px = get_pixel_from_font_data(data, x, y);
                if (px > 0) cur = true;
                img.setPixel(x, y, cur);
            }
            img.showImage(0);
        }
    }

    export function ImagIntsAtIdx(n: number, s: string): void {
        let c = s.charCodeAt(n);
        if (c < ASCII_START || c > ASCII_END) {
            c = '?'.charCodeAt(0);
        }
        let offset = (c - ASCII_START) * 5;
        let data = pendolino3.slice(offset, offset + 5);
        let output: number[];
        let ptr = 0;
        for (let y = 0; y < 5; y++) {
            for (let x = 0; x < 5; x++) {
                let px = get_pixel_from_font_data(data, x, y);
                output[ptr] = px;
                ptr++;
            }
        }
    }
    /**
     * TODO: describe your function here
     * @param value describe value here, eg: 5
     */
    //% block
    export function get_pixel_from_font_data(data: number[], x: number, y: number): number {
        return ((data[y] >> (4 - x)) & 1);
    }
}

class SSD1306 {
    private screen: number[];
    private _cmd(cAry: number[]): void {
        pins.P16.digitalWrite(false);
        for (let i = 0; i < cAry.length; i++) {
            pins.spiWrite(cAry[i]);
        }
        pins.P16.digitalWrite(true);
    }
    private _cmd2(cAry: string): void {
        pins.P16.digitalWrite(false);
        for (let i = 0; i < cAry.length; i++) {
            pins.spiWrite(cAry.charCodeAt(i));
        }
        pins.P16.digitalWrite(true);
    }
    constructor() {
        let c = [174, 164, 213, 240, 168, 63, 211, 0, 0, 141, 20, 32, 0, 33, 0, 127, 34, 0, 63, 161, 200, 218, 18, 129, 207, 217, 241, 219, 64, 166, 214, 0, 175];
        let x = '\xAE\xA4\xD5\xF0\xA8\x3F\xD3\x00\x00\x8D\x14\x20\x00\x21\x00\x7F\x22\x00\x3F\xa1\xc8\xDA\x12\x81\xCF\xd9\xF1\xDB\x40\xA6\xd6\x00\xaf';
        pins.P15.digitalWrite(false);
        pins.spiPins(DigitalPin.P14, DigitalPin.P14, DigitalPin.P13);
        pins.spiFormat(8, 0);
        pins.spiFrequency(9600);
        pins.P15.digitalWrite(true);
        this._cmd(c);
        this.screen = [];
        for (let i = 0; i < 1024; i++) {
            this.screen[i] = 0;
        }
    }
    private _set_pos(col: number, page: number) {
        let c1 = col * 2 & 0x0F;
        let c2 = col >> 3;
        this._cmd([0xb0 | page, 0x00 | c1, 0x10 | c2]);
    }
    public clear_old() {
        for (let i = 0; i < 1024; i++) {
            this.screen[i] = 0;
        }
    }
    public draw_screen() {
        this._set_pos(0, 0);
        for (let i = 0; i < this.screen.length; i++) {
            pins.spiWrite(this.screen[i]);
        }
    }

    public test() {
        this.screen[64] = 255;
        this.screen[68] = 255;
        this.screen[72] = 255;
        this.screen[76] = 255;
        this.draw_screen();
    }
}